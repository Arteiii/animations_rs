pub struct Frames {
    pub frames: Vec<&'static str>,
    pub speed_ms: u64,
}

pub struct PreDefined;

impl PreDefined {
    fn generate_frames(pattern: Vec<&'static str>, inverted: bool, speed_ms: u64) -> Frames {
        let mut frames = pattern;

        if inverted {
            frames.reverse();
        }

        Frames { frames, speed_ms }
    }

    /// # Preview:
    /// ⠋
    /// ⠹
    /// ⠧
    /// the dot spinner animation consists of a sequence of Unicode characters representing
    /// dots rotating in a circular motion
    ///
    /// If `inverted` is set to true, the direction of rotation will be reversed
    ///
    /// # Arguments
    ///
    /// * `inverted` - A boolean value indicating whether to invert the direction of rotation
    pub fn dot_spinner1(inverted: bool) -> Frames {
        let pattern = vec!["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"];
        Self::generate_frames(pattern, inverted, 80)
    }

    /// the dot spinner animation consists of a sequence of Unicode characters representing
    /// dots rotating in a circular motion
    ///
    /// If `inverted` is set to true, the direction of rotation will be reversed
    ///
    /// # Arguments
    ///
    /// * `inverted` - A boolean value indicating whether to invert the direction of rotation
    pub fn dot_spinner2(inverted: bool) -> Frames {
        let pattern = vec!["⣷", "⣯", "⣟", "⡿", "⢿", "⣻", "⣽", "⣾"];
        Self::generate_frames(pattern, inverted, 80)
    }

    pub fn dot_spinner3(inverted: bool) -> Frames {
        let pattern = vec!["⠋", "⠙", "⠚", "⠞", "⠖", "⠦", "⠴", "⠲", "⠳", "⠓"];
        Self::generate_frames(pattern, inverted, 80)
    }

    pub fn dot_spinner4(inverted: bool) -> Frames {
        let pattern = vec![
            "⠄", "⠆", "⠇", "⠋", "⠙", "⠸", "⠰", "⠠", "⠰", "⠸", "⠙", "⠋", "⠇", "⠆",
        ];
        Self::generate_frames(pattern, inverted, 80)
    }

    pub fn dot_spinner5(inverted: bool) -> Frames {
        let pattern = vec![
            "⠀", "⠁", "⠂", "⠃", "⠄", "⠅", "⠆", "⠇", "⡀", "⡁", "⡂", "⡃", "⡄", "⡅", "⡆", "⡇", "⠈",
            "⠉", "⠊", "⠋", "⠌", "⠍", "⠎", "⠏", "⡈", "⡉", "⡊", "⡋", "⡌", "⡍", "⡎", "⡏", "⠐", "⠑",
            "⠒", "⠓", "⠔", "⠕", "⠖", "⠗", "⡐", "⡑", "⡒", "⡓", "⡔", "⡕", "⡖", "⡗", "⠘", "⠙", "⠚",
            "⠛", "⠜", "⠝", "⠞", "⠟", "⡘", "⡙", "⡚", "⡛", "⡜", "⡝", "⡞", "⡟", "⠠", "⠡", "⠢", "⠣",
            "⠤", "⠥", "⠦", "⠧", "⡠", "⡡", "⡢", "⡣", "⡤", "⡥", "⡦", "⡧", "⠨", "⠩", "⠪", "⠫", "⠬",
            "⠭", "⠮", "⠯", "⡨", "⡩", "⡪", "⡫", "⡬", "⡭", "⡮", "⡯", "⠰", "⠱", "⠲", "⠳", "⠴", "⠵",
            "⠶", "⠷", "⡰", "⡱", "⡲", "⡳", "⡴", "⡵", "⡶", "⡷", "⠸", "⠹", "⠺", "⠻", "⠼", "⠽", "⠾",
            "⠿", "⡸", "⡹", "⡺", "⡻", "⡼", "⡽", "⡾", "⡿", "⢀", "⢁", "⢂", "⢃", "⢄", "⢅", "⢆", "⢇",
            "⣀", "⣁", "⣂", "⣃", "⣄", "⣅", "⣆", "⣇", "⢈", "⢉", "⢊", "⢋", "⢌", "⢍", "⢎", "⢏", "⣈",
            "⣉", "⣊", "⣋", "⣌", "⣍", "⣎", "⣏", "⢐", "⢑", "⢒", "⢓", "⢔", "⢕", "⢖", "⢗", "⣐", "⣑",
            "⣒", "⣓", "⣔", "⣕", "⣖", "⣗", "⢘", "⢙", "⢚", "⢛", "⢜", "⢝", "⢞", "⢟", "⣘", "⣙", "⣚",
            "⣛", "⣜", "⣝", "⣞", "⣟", "⢠", "⢡", "⢢", "⢣", "⢤", "⢥", "⢦", "⢧", "⣠", "⣡", "⣢", "⣣",
            "⣤", "⣥", "⣦", "⣧", "⢨", "⢩", "⢪", "⢫", "⢬", "⢭", "⢮", "⢯", "⣨", "⣩", "⣪", "⣫", "⣬",
            "⣭", "⣮", "⣯", "⢰", "⢱", "⢲", "⢳", "⢴", "⢵", "⢶", "⢷", "⣰", "⣱", "⣲", "⣳", "⣴", "⣵",
            "⣶", "⣷", "⢸", "⢹", "⢺", "⢻", "⢼", "⢽", "⢾", "⢿", "⣸", "⣹", "⣺", "⣻", "⣼", "⣽", "⣾",
            "⣿",
        ];
        Self::generate_frames(pattern, inverted, 80)
    }

    /// # Preview:
    /// (　´･ω)
    /// (´･ω･`)
    /// (ω･`　)
    pub fn kaomoji(inverted: bool) -> Frames {
        let pattern = vec![
            "(　´･ω)",
            "( ´･ω･)",
            "(´･ω･`)",
            "(･ω･` )",
            "(ω･`　)",
            "(･ω･` )",
            "(´･ω･`)",
            "( ´･ω･)",
            "(　´･ω)",
        ];
        Self::generate_frames(pattern, inverted, 100)
    }

    /// # Preview:
    /// ▰▱▱▱▱▱▱
    /// ▰▰▰▰▱▱▱
    /// ▰▰▰▰▰▰▰
    ///
    /// ## Credits
    ///
    /// <https://github.com/ad4mx/spinoff/blob/main/src/spinners.rs>
    pub fn aesthetic_spin(inverted: bool) -> Frames {
        let pattern = vec![
            "▱ ▱ ▱ ▱ ▱ ▱ ▱ ",
            "▰ ▱ ▱ ▱ ▱ ▱ ▱ ",
            "▰ ▰ ▱ ▱ ▱ ▱ ▱ ",
            "▰ ▰ ▰ ▱ ▱ ▱ ▱ ",
            "▰ ▰ ▰ ▰ ▱ ▱ ▱ ",
            "▰ ▰ ▰ ▰ ▰ ▱ ▱ ",
            "▰ ▰ ▰ ▰ ▰ ▰ ▱ ",
            "▰ ▰ ▰ ▰ ▰ ▰ ▰ ",
            "▱ ▰ ▰ ▰ ▰ ▰ ▰ ",
            "▱ ▱ ▰ ▰ ▰ ▰ ▰ ",
            "▱ ▱ ▱ ▰ ▰ ▰ ▰ ",
            "▱ ▱ ▱ ▱ ▰ ▰ ▰ ",
            "▱ ▱ ▱ ▱ ▱ ▰ ▰ ",
            "▱ ▱ ▱ ▱ ▱ ▱ ▰ ",
            "▱ ▱ ▱ ▱ ▱ ▱ ▱ ",
        ];
        Self::generate_frames(pattern, inverted, 120)
    }

    pub fn aesthetic_load(inverted: bool) -> Frames {
        let pattern = vec![
            "▱ ▱ ▱ ▱ ▱ ▱ ▱ ",
            "▰ ▱ ▱ ▱ ▱ ▱ ▱ ",
            "▰ ▰ ▱ ▱ ▱ ▱ ▱ ",
            "▰ ▰ ▰ ▱ ▱ ▱ ▱ ",
            "▰ ▰ ▰ ▰ ▱ ▱ ▱ ",
            "▰ ▰ ▰ ▰ ▰ ▱ ▱ ",
            "▰ ▰ ▰ ▰ ▰ ▰ ▱ ",
            "▰ ▰ ▰ ▰ ▰ ▰ ▰ ",
        ];
        Self::generate_frames(pattern, inverted, 180)
    }

    /// # Preview:
    /// 🕛
    /// 🕘
    /// 🕔
    ///
    /// ## Credits
    ///
    /// <https://github.com/ad4mx/spinoff/blob/main/src/spinners.rs>
    pub fn clock(inverted: bool) -> Frames {
        let pattern = vec![
            "🕛 ", "🕐 ", "🕑 ", "🕒 ", "🕓 ", "🕔 ", "🕕 ", "🕖 ", "🕗 ", "🕘 ", "🕙 ", "🕚 ",
        ];
        Self::generate_frames(pattern, inverted, 100)
    }

    /// # Preview:
    /// [=   ]
    /// [ ===]
    /// [==  ]
    ///
    /// ## Credits
    ///
    /// <https://github.com/ad4mx/spinoff/blob/main/src/spinners.rs>
    pub fn bouncing_bar(inverted: bool) -> Frames {
        let pattern = vec![
            "[    ]", "[=   ]", "[==  ]", "[=== ]", "[ ===]", "[  ==]", "[   =]", "[    ]",
            "[   =]", "[  ==]", "[ ===]", "[====]", "[=== ]", "[==  ]", "[=   ]",
        ];
        Self::generate_frames(pattern, inverted, 80)
    }

    /// # Preview:
    ///
    /// ████████████▁▁▁▁▁▁▁▁
    /// ▁▁▁▁▁▁▁▁▁█████████▁▁
    /// ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█
    ///
    /// ## Credits
    ///
    /// <https://github.com/ad4mx/spinoff/blob/main/src/spinners.rs>
    pub fn material(inverted: bool) -> Frames {
        let pattern = vec![
            "█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "███████▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "████████▁▁▁▁▁▁▁▁▁▁▁▁",
            "█████████▁▁▁▁▁▁▁▁▁▁▁",
            "█████████▁▁▁▁▁▁▁▁▁▁▁",
            "██████████▁▁▁▁▁▁▁▁▁▁",
            "███████████▁▁▁▁▁▁▁▁▁",
            "█████████████▁▁▁▁▁▁▁",
            "██████████████▁▁▁▁▁▁",
            "██████████████▁▁▁▁▁▁",
            "▁██████████████▁▁▁▁▁",
            "▁██████████████▁▁▁▁▁",
            "▁██████████████▁▁▁▁▁",
            "▁▁██████████████▁▁▁▁",
            "▁▁▁██████████████▁▁▁",
            "▁▁▁▁█████████████▁▁▁",
            "▁▁▁▁██████████████▁▁",
            "▁▁▁▁██████████████▁▁",
            "▁▁▁▁▁██████████████▁",
            "▁▁▁▁▁██████████████▁",
            "▁▁▁▁▁██████████████▁",
            "▁▁▁▁▁▁██████████████",
            "▁▁▁▁▁▁██████████████",
            "▁▁▁▁▁▁▁█████████████",
            "▁▁▁▁▁▁▁█████████████",
            "▁▁▁▁▁▁▁▁████████████",
            "▁▁▁▁▁▁▁▁████████████",
            "▁▁▁▁▁▁▁▁▁███████████",
            "▁▁▁▁▁▁▁▁▁███████████",
            "▁▁▁▁▁▁▁▁▁▁██████████",
            "▁▁▁▁▁▁▁▁▁▁██████████",
            "▁▁▁▁▁▁▁▁▁▁▁▁████████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
            "█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
            "██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
            "██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
            "███▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
            "████▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
            "█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
            "█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
            "██████▁▁▁▁▁▁▁▁▁▁▁▁▁█",
            "████████▁▁▁▁▁▁▁▁▁▁▁▁",
            "█████████▁▁▁▁▁▁▁▁▁▁▁",
            "█████████▁▁▁▁▁▁▁▁▁▁▁",
            "█████████▁▁▁▁▁▁▁▁▁▁▁",
            "█████████▁▁▁▁▁▁▁▁▁▁▁",
            "███████████▁▁▁▁▁▁▁▁▁",
            "████████████▁▁▁▁▁▁▁▁",
            "████████████▁▁▁▁▁▁▁▁",
            "██████████████▁▁▁▁▁▁",
            "██████████████▁▁▁▁▁▁",
            "▁██████████████▁▁▁▁▁",
            "▁██████████████▁▁▁▁▁",
            "▁▁▁█████████████▁▁▁▁",
            "▁▁▁▁▁████████████▁▁▁",
            "▁▁▁▁▁████████████▁▁▁",
            "▁▁▁▁▁▁███████████▁▁▁",
            "▁▁▁▁▁▁▁▁█████████▁▁▁",
            "▁▁▁▁▁▁▁▁█████████▁▁▁",
            "▁▁▁▁▁▁▁▁▁█████████▁▁",
            "▁▁▁▁▁▁▁▁▁█████████▁▁",
            "▁▁▁▁▁▁▁▁▁▁█████████▁",
            "▁▁▁▁▁▁▁▁▁▁▁████████▁",
            "▁▁▁▁▁▁▁▁▁▁▁████████▁",
            "▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
            "▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
            "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        ];
        Self::generate_frames(pattern, inverted, 17)
    }
}
